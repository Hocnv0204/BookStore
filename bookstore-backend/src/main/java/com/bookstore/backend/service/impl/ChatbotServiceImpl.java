package com.bookstore.backend.service.impl;

import com.bookstore.backend.dto.request.GeminiRequest;
import com.bookstore.backend.dto.response.GeminiResponse;
import com.bookstore.backend.model.Book;
import com.bookstore.backend.repository.BookRepository;
import com.bookstore.backend.service.ChatbotService;
import com.bookstore.backend.service.ChatSessionService;
import com.bookstore.backend.service.GeminiService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatbotServiceImpl implements ChatbotService {

    private final GeminiService geminiService;
    private final BookRepository bookRepository;
    private final ChatSessionService chatSessionService;

    @Override
    public GeminiResponse chatWithBookstore(GeminiRequest request) {
        try {
            // X·ª≠ l√Ω session theo userId
            String sessionId = request.getSessionId();
            Long userId = request.getUserId();
            
            // N·∫øu c√≥ userId, ∆∞u ti√™n s·ª≠ d·ª•ng userId ƒë·ªÉ qu·∫£n l√Ω session
            if (userId != null) {
                sessionId = chatSessionService.getOrCreateSessionForUser(userId);
            } else if (sessionId == null || sessionId.isEmpty()) {
                sessionId = UUID.randomUUID().toString();
            }

            // L·∫•y ng·ªØ c·∫£nh t·ª´ l·ªãch s·ª≠ chat (∆∞u ti√™n userId)
            String chatHistory;
            if (userId != null) {
                chatHistory = chatSessionService.buildContextFromUserHistory(userId, 10);
            } else {
                chatHistory = chatSessionService.buildContextFromHistory(sessionId, 10);
            }

            // Truy xu·∫•t d·ªØ li·ªáu t·ª´ database d·ª±a tr√™n c√¢u h·ªèi v√† context
            String dbInfo = getRelevantBookDataWithContext(request.getPrompt(), chatHistory);

            // T·∫°o prompt cho Gemini v·ªõi context t·ª´ database v√† l·ªãch s·ª≠
            String enhancedPrompt = buildPromptWithContext(request.getPrompt(), dbInfo, chatHistory);

            // T·∫°o request cho Gemini
            GeminiRequest geminiRequest = GeminiRequest.builder()
                    .prompt(enhancedPrompt)
                    .sessionId(sessionId)
                    .userId(userId)
                    .build();

            // G·ªçi Gemini API
            GeminiResponse response = geminiService.askGemini(geminiRequest);
            response.setSessionId(sessionId);

            // L∆∞u tin nh·∫Øn v√†o session (∆∞u ti√™n userId)
            if (response.isSuccess()) {
                if (userId != null) {
                    chatSessionService.saveMessageWithUserId(userId, request.getPrompt(), response.getContent());
                } else {
                    chatSessionService.saveMessage(sessionId, request.getPrompt(), response.getContent());
                }
            }

            return response;

        } catch (Exception e) {
            log.error("Error in chatbot service: ", e);
            return GeminiResponse.builder()
                    .content("Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")
                    .sessionId(request.getSessionId())
                    .success(false)
                    .error(e.getMessage())
                    .build();
        }
    }

    private String getRelevantBookDataWithContext(String userMessage, String chatHistory) {
        StringBuilder dbInfo = new StringBuilder();

        // Ph√¢n t√≠ch context t·ª´ l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉu ng∆∞·ªùi d√πng ƒëang h·ªèi g√¨
        String searchContext = analyzeSearchContext(userMessage, chatHistory);
        
        // Ki·ªÉm tra xem kh√°ch c√≥ h·ªèi v·ªÅ t·ªìn kho kh√¥ng
        boolean askingForStock = isAskingForStock(userMessage, chatHistory);
        
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s√°ch
        if (containsBookKeywords(userMessage) || isContextualBookQuery(chatHistory, userMessage)) {
            List<Book> books = searchBooksIntelligent(userMessage, searchContext);
            
            if (!books.isEmpty()) {
                dbInfo.append("=== TH√îNG TIN CHI TI·∫æT S√ÅCH T·ª™ C·ª¨A H√ÄNG ===\n\n");
                
                for (int i = 0; i < Math.min(books.size(), 5); i++) {
                    Book book = books.get(i);
                    dbInfo.append("üìö ").append("‚îÄ".repeat(50)).append("\n");
                    dbInfo.append(String.format("üÜî ID: %d\n", book.getId()));
                    dbInfo.append(String.format("üìñ T√™n s√°ch: %s\n", book.getTitle()));
                    dbInfo.append(String.format("‚úçÔ∏è T√°c gi·∫£: %s\n", book.getAuthorName()));
                    dbInfo.append(String.format("üí∞ Gi√° b√°n: %,.0f VND\n", book.getPrice()));
                    
                    // Th√™m th√¥ng tin category v·ªõi emoji
                    if (book.getCategory() != null) {
                        dbInfo.append(String.format("üè∑Ô∏è Th·ªÉ lo·∫°i: %s\n", book.getCategory().getName()));
                    }
                    
                    // Th√™m th√¥ng tin publisher
                    if (book.getPublisher() != null) {
                        dbInfo.append(String.format("üè¢ Nh√† xu·∫•t b·∫£n: %s\n", book.getPublisher().getName()));
                    }
                    
                    // Th√™m th√¥ng tin distributor
                    if (book.getDistributor() != null) {
                        dbInfo.append(String.format("üöö Nh√† ph√¢n ph·ªëi: %s\n", book.getDistributor().getName()));
                    }
                    
                    // Th√™m m√¥ t·∫£ chi ti·∫øt (lu√¥n hi·ªÉn th·ªã)
                    if (book.getDescription() != null && !book.getDescription().trim().isEmpty()) {
                        dbInfo.append(String.format("üìù M√¥ t·∫£ s√°ch:\n%s\n", book.getDescription()));
                    } else {
                        dbInfo.append("üìù M√¥ t·∫£ s√°ch: ƒêang c·∫≠p nh·∫≠t th√¥ng tin\n");
                    }
                    
                    // Th√™m gi·ªõi thi·ªáu (lu√¥n hi·ªÉn th·ªã)
                    if (book.getIntroduction() != null && !book.getIntroduction().trim().isEmpty()) {
                        dbInfo.append(String.format("üìã Gi·ªõi thi·ªáu:\n%s\n", book.getIntroduction()));
                    } else {
                        dbInfo.append("üìã Gi·ªõi thi·ªáu: ƒêang c·∫≠p nh·∫≠t th√¥ng tin\n");
                    }
                    
                    // Ch·ªâ hi·ªÉn th·ªã th√¥ng tin t·ªìn kho khi kh√°ch h·ªèi
                    if (askingForStock) {
                        dbInfo.append(String.format("üì¶ S·ªë l∆∞·ª£ng t·ªìn: %d cu·ªën\n", book.getQuantityStock()));
                        String status = book.getQuantityStock() > 0 ? "‚úÖ C√≤n h√†ng" : "‚ùå H·∫øt h√†ng";
                        dbInfo.append(String.format("üìä Tr·∫°ng th√°i: %s\n", status));
                    } else {
                        // Ch·ªâ hi·ªÉn th·ªã tr·∫°ng th√°i c√≥/h·∫øt h√†ng
                        String status = book.getQuantityStock() > 0 ? "‚úÖ C√≥ s·∫µn" : "‚ùå H·∫øt h√†ng";
                        dbInfo.append(String.format("üìä Tr·∫°ng th√°i: %s\n", status));
                    }
                    
                    dbInfo.append("\n");
                }
                
                // Th√™m g·ª£i √Ω t√¨m ki·∫øm th√™m
                if (books.size() > 5) {
                    dbInfo.append(String.format("üìå C√≤n %d cu·ªën s√°ch kh√°c ph√π h·ª£p. B·∫°n c√≥ mu·ªën xem th√™m kh√¥ng?\n", books.size() - 5));
                }
                
                // Th√™m g·ª£i √Ω h·ªèi th√™m th√¥ng tin
                if (!askingForStock) {
                    dbInfo.append("\nüí° G·ª£i √Ω: B·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ s·ªë l∆∞·ª£ng t·ªìn kho, so s√°nh v·ªõi s√°ch kh√°c, ho·∫∑c ƒë∆∞·ª£c t∆∞ v·∫•n th√™m.\n");
                }
                
            } else {
                // Kh√¥ng t√¨m th·∫•y s√°ch, ƒë∆∞a ra g·ª£i √Ω
                dbInfo.append("‚ùå KH√îNG T√åM TH·∫§Y S√ÅCH PH√ô H·ª¢P\n\n");
                dbInfo.append("üí° G·ª¢I √ù T√åM KI·∫æM:\n");
                dbInfo.append("- Th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a ng·∫Øn h∆°n\n");
                dbInfo.append("- Ki·ªÉm tra ch√≠nh t·∫£ t√™n s√°ch ho·∫∑c t√°c gi·∫£\n");
                dbInfo.append("- H·ªèi theo th·ªÉ lo·∫°i (kinh doanh, vƒÉn h·ªçc, khoa h·ªçc...)\n");
                
                // ƒê·ªÅ xu·∫•t s√°ch ph·ªï bi·∫øn
                List<Book> popularBooks = getPopularBooks();
                if (!popularBooks.isEmpty()) {
                    dbInfo.append("\nüî• S√ÅCH PH·ªî BI·∫æN:\n");
                    for (Book book : popularBooks.subList(0, Math.min(3, popularBooks.size()))) {
                        dbInfo.append(String.format("- %s - %s (%.0f VND)\n", 
                                book.getTitle(), book.getAuthorName(), book.getPrice()));
                    }
                }
            }
        }
        
        return dbInfo.toString();
    }

    private String analyzeSearchContext(String userMessage, String chatHistory) {
        // Ph√¢n t√≠ch context t·ª´ l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉu ng∆∞·ªùi d√πng mu·ªën t√¨m g√¨
        StringBuilder context = new StringBuilder();
        
        // T√¨m th·ªÉ lo·∫°i t·ª´ l·ªãch s·ª≠
        if (chatHistory.contains("kinh doanh") || chatHistory.contains("business")) {
            context.append("kinh doanh ");
        }
        if (chatHistory.contains("vƒÉn h·ªçc") || chatHistory.contains("literature")) {
            context.append("vƒÉn h·ªçc ");
        }
        if (chatHistory.contains("khoa h·ªçc") || chatHistory.contains("science")) {
            context.append("khoa h·ªçc ");
        }
        if (chatHistory.contains("ti·ªÉu thuy·∫øt") || chatHistory.contains("novel")) {
            context.append("ti·ªÉu thuy·∫øt ");
        }
        if (chatHistory.contains("truy·ªán") || chatHistory.contains("story")) {
            context.append("truy·ªán ");
        }
        
        return context.toString().trim();
    }

    private boolean isContextualBookQuery(String chatHistory, String userMessage) {
        // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi ti·∫øp theo trong context kh√¥ng
        String lowerMessage = userMessage.toLowerCase().trim();
        
        // N·∫øu user ch·ªâ n√≥i t√™n s√°ch ho·∫∑c s·ªë th·ª© t·ª± sau khi AI ƒë√£ gi·ªõi thi·ªáu s√°ch
        if (chatHistory.contains("gi·ªõi thi·ªáu") || chatHistory.contains("c√≥ th·ªÉ") || chatHistory.contains("s√°ch")) {
            // C√°c d·∫•u hi·ªáu cho th·∫•y user ƒëang ch·ªçn s√°ch t·ª´ danh s√°ch ƒë√£ ƒë∆∞a ra
            return lowerMessage.matches(".*\\b(cu·ªën|quy·ªÉn|s·ªë|th·ª©)\\s*\\d+.*") || // "cu·ªën 1", "s·ªë 2"
                   lowerMessage.matches(".*\\b\\d+\\b.*") || // ch·ªâ s·ªë
                   lowerMessage.split("\\s+").length <= 3; // t√™n ng·∫Øn
        }
        
        return false;
    }

    private List<Book> searchBooksIntelligent(String query, String context) {
        List<Book> results = new ArrayList<>();
        
        // K·∫øt h·ª£p query v·ªõi context
        String fullQuery = (context + " " + query).trim();
        String[] keywords = extractKeywords(fullQuery);
        
        // 1. T√¨m ki·∫øm theo t√™n s√°ch (∆∞u ti√™n cao nh·∫•t)
        for (String keyword : keywords) {
            if (keyword.length() >= 2) {
                Page<Book> bookPage = bookRepository.findByTitleContainingIgnoreCase(keyword, PageRequest.of(0, 10));
                results.addAll(bookPage.getContent());
                if (results.size() >= 5) break;
            }
        }
        
        // 2. T√¨m ki·∫øm theo t√°c gi·∫£
        if (results.size() < 5) {
            for (String keyword : keywords) {
                if (keyword.length() >= 2) {
                    Page<Book> bookPage = bookRepository.findByAuthorNameContainingIgnoreCase(keyword, PageRequest.of(0, 10));
                    results.addAll(bookPage.getContent());
                    if (results.size() >= 10) break;
                }
            }
        }
        
        // 3. T√¨m ki·∫øm theo th·ªÉ lo·∫°i n·∫øu c√≥ context
        if (results.size() < 5 && !context.isEmpty()) {
            Page<Book> bookPage = bookRepository.findByCategoryNameContainingIgnoreCase(context, PageRequest.of(0, 10));
            results.addAll(bookPage.getContent());
        }
        
        // 4. T√¨m ki·∫øm t·ªïng h·ª£p n·∫øu v·∫´n √≠t k·∫øt qu·∫£
        if (results.size() < 3) {
            for (String keyword : keywords) {
                if (keyword.length() >= 2) {
                    Page<Book> bookPage = bookRepository.findByTitleContainingIgnoreCaseOrAuthorContainingIgnoreCase(
                            keyword, keyword, PageRequest.of(0, 15));
                    results.addAll(bookPage.getContent());
                }
            }
        }
        
        // Lo·∫°i b·ªè duplicate v√† gi·ªõi h·∫°n k·∫øt qu·∫£
        return results.stream()
                .distinct()
                .limit(10)
                .collect(Collectors.toList());
    }

    private boolean isAskingForStock(String userMessage, String chatHistory) {
        String lowerMessage = userMessage.toLowerCase();
        String lowerHistory = chatHistory.toLowerCase();
        
        // C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn t·ªìn kho
        String[] stockKeywords = {
            "t·ªìn kho", "c√≤n h√†ng", "h·∫øt h√†ng", "s·ªë l∆∞·ª£ng", "c√≤n bao nhi√™u", 
            "c√≤n kh√¥ng", "c√≥ s·∫µn", "trong kho", "inventory", "stock",
            "c√≤n m·∫•y", "bao nhi√™u cu·ªën", "cu·ªën c√≤n l·∫°i", "c√≤n l·∫°i",
            "ƒë·∫∑t h√†ng", "mua ƒë∆∞·ª£c", "available"
        };
        
        // Ki·ªÉm tra trong message hi·ªán t·∫°i
        for (String keyword : stockKeywords) {
            if (lowerMessage.contains(keyword)) {
                return true;
            }
        }
        
        // Ki·ªÉm tra trong l·ªãch s·ª≠ g·∫ßn ƒë√¢y (ch·ªâ 2-3 tin nh·∫Øn g·∫ßn nh·∫•t)
        String[] recentHistory = lowerHistory.split("\\n");
        int recentCount = Math.min(3, recentHistory.length);
        for (int i = Math.max(0, recentHistory.length - recentCount); i < recentHistory.length; i++) {
            for (String keyword : stockKeywords) {
                if (recentHistory[i].contains(keyword)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    private List<Book> getPopularBooks() {
        try {
            // S·ª≠ d·ª•ng method c√≥ s·∫µn trong repository
            return bookRepository.findTop20ByOrderByIdDesc();
        } catch (Exception e) {
            log.error("Error getting popular books: ", e);
            // Fallback: l·∫•y 10 s√°ch ƒë·∫ßu ti√™n
            return bookRepository.findAll().stream().limit(10).collect(Collectors.toList());
        }
    }

    private boolean containsBookKeywords(String message) {
        String lowerMessage = message.toLowerCase();
        return lowerMessage.contains("s√°ch") || 
               lowerMessage.contains("book") || 
               lowerMessage.contains("t√¨m") ||
               lowerMessage.contains("t√¨m ki·∫øm") ||
               lowerMessage.contains("c√≥") ||
               lowerMessage.contains("gi√°") ||
               lowerMessage.contains("bao nhi√™u") ||
               lowerMessage.contains("mua") ||
               lowerMessage.contains("b√°n") ||
               lowerMessage.contains("t√°c gi·∫£") ||
               lowerMessage.contains("author") ||
               lowerMessage.contains("nh√† xu·∫•t b·∫£n") ||
               lowerMessage.contains("publisher") ||
               lowerMessage.contains("th·ªÉ lo·∫°i") ||
               lowerMessage.contains("category") ||
               lowerMessage.contains("c√≤n h√†ng") ||
               lowerMessage.contains("h·∫øt h√†ng") ||
               lowerMessage.contains("t·ªìn kho") ||
               lowerMessage.contains("kinh doanh") ||
               lowerMessage.contains("vƒÉn h·ªçc") ||
               lowerMessage.contains("khoa h·ªçc") ||
               lowerMessage.contains("ti·ªÉu thuy·∫øt") ||
               lowerMessage.contains("truy·ªán") ||
               lowerMessage.contains("novel");
    }

    private String[] extractKeywords(String query) {
        // Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt v√† t√°ch t·ª´ kh√≥a
        String cleanQuery = query.toLowerCase()
                .replaceAll("\\b(t√¨m|ki·∫øm|c√≥|kh√¥ng|s√°ch|book|t√°c gi·∫£|author|gi√°|bao nhi√™u|vnd|ƒë·ªìng|cho|t√¥i|m√¨nh|b·∫°n|cu·ªën|quy·ªÉn)\\b", "")
                .replaceAll("[^a-zA-Z0-9\\s√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë]", " ")
                .replaceAll("\\s+", " ")
                .trim();
        
        return Arrays.stream(cleanQuery.split("\\s+"))
                .filter(word -> word.length() >= 2)
                .toArray(String[]::new);
    }

    private String buildPromptWithContext(String userMessage, String dbInfo, String chatHistory) {
        StringBuilder prompt = new StringBuilder();
        
        prompt.append("ü§ñ B·∫°n l√† BookStore AI Assistant - chuy√™n gia t∆∞ v·∫•n s√°ch th√¥ng minh t·∫°i c·ª≠a h√†ng BookStore.\n\n");
        
        prompt.append("üéØ NHI·ªÜM V·ª§ CH√çNH:\n");
        prompt.append("- Hi·ªÉu context t·ª´ cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥\n");
        prompt.append("- Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ n·ªôi dung, gi√° tr·ªã c·ªßa s√°ch d·ª±a tr√™n M√î T·∫¢ v√† GI·ªöI THI·ªÜU\n");
        prompt.append("- T∆∞ v·∫•n s√°ch ph√π h·ª£p d·ª±a tr√™n nhu c·∫ßu kh√°ch h√†ng\n");
        prompt.append("- Duy tr√¨ ng·ªØ c·∫£nh h·ªôi tho·∫°i li√™n t·ª•c\n\n");
        
        prompt.append("üìã NGUY√äN T·∫ÆC HO·∫†T ƒê·ªòNG:\n");
        prompt.append("1. üîç LU√îN ∆∞u ti√™n th√¥ng tin t·ª´ DATABASE th·ª±c t·∫ø\n");
        prompt.append("2. üö´ KH√îNG BAO GI·ªú b·ªãa ƒë·∫∑t th√¥ng tin v·ªÅ s√°ch, gi√° c·∫£, t√°c gi·∫£\n");
        prompt.append("3. üí¨ HI·ªÇU context: n·∫øu kh√°ch ƒë√£ h·ªèi v·ªÅ th·ªÉ lo·∫°i, ti·∫øp t·ª•c trong context ƒë√≥\n");
        prompt.append("4. üìñ M√î T·∫¢ chi ti·∫øt n·ªôi dung d·ª±a tr√™n DESCRIPTION v√† INTRODUCTION t·ª´ database\n");
        prompt.append("5. üí∞ Lu√¥n ƒë·ªÅ c·∫≠p gi√° ch√≠nh x√°c v·ªõi ƒë∆°n v·ªã VND\n");
        prompt.append("6. üìä CH·ªà n√≥i v·ªÅ s·ªë l∆∞·ª£ng t·ªìn kho khi kh√°ch h√†ng h·ªèi c·ª• th·ªÉ\n");
        prompt.append("7. üí° ƒê·ªÅ xu·∫•t s√°ch li√™n quan ph√π h·ª£p\n");
        prompt.append("8. üé® S·ª≠ d·ª•ng format ƒë·∫πp m·∫Øt, d·ªÖ ƒë·ªçc\n\n");
        
        // Context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
        if (!chatHistory.isEmpty()) {
            prompt.append("üìö NG·ªÆ C·∫¢NH H·ªòI THO·∫†I TR∆Ø·ªöC:\n");
            prompt.append(chatHistory).append("\n\n");
            prompt.append("‚ö†Ô∏è L∆ØU √ù: H√£y duy tr√¨ ng·ªØ c·∫£nh n√†y v√† tr·∫£ l·ªùi ti·∫øp theo logic c·ªßa cu·ªôc h·ªôi tho·∫°i.\n\n");
        }
        
        // D·ªØ li·ªáu t·ª´ database
        if (!dbInfo.isEmpty()) {
            prompt.append("üóÉÔ∏è D·ªÆ LI·ªÜU T·ª™ C·ª¨A H√ÄNG:\n");
            prompt.append(dbInfo).append("\n\n");
        }
        
        prompt.append("‚ùì C√ÇU H·ªéI KH√ÅCH H√ÄNG: ").append(userMessage).append("\n\n");
        
        prompt.append("üìù H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:\n");
        prompt.append("‚úÖ Tr·∫£ l·ªùi th√¢n thi·ªán, chuy√™n nghi·ªáp v√† chi ti·∫øt\n");
        prompt.append("‚úÖ S·ª≠ d·ª•ng emoji v√† format ƒë·∫πp m·∫Øt\n");
        prompt.append("‚úÖ M√¥ t·∫£ c·ª• th·ªÉ v·ªÅ n·ªôi dung d·ª±a tr√™n DESCRIPTION v√† INTRODUCTION\n");
        prompt.append("‚úÖ Gi·∫£i th√≠ch gi√° tr·ªã v√† l·ª£i √≠ch c·ªßa s√°ch\n");
        prompt.append("‚úÖ N·∫øu c√≥ nhi·ªÅu s√°ch, hi·ªÉn th·ªã 3-5 cu·ªën ph√π h·ª£p nh·∫•t\n");
        prompt.append("‚úÖ ƒê∆∞a ra l√Ω do t·∫°i sao n√™n ch·ªçn s√°ch n√†y\n");
        prompt.append("‚úÖ H·ªèi th√™m v·ªÅ s·ªü th√≠ch ƒë·ªÉ t∆∞ v·∫•n t·ªët h∆°n\n");
        prompt.append("‚úÖ N·∫øu kh√°ch h·ªèi ti·∫øp v·ªÅ s√°ch ƒë√£ gi·ªõi thi·ªáu, tr·∫£ l·ªùi chi ti·∫øt v·ªÅ s√°ch ƒë√≥\n");
        prompt.append("‚úÖ KH√îNG nh·∫Øc ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho tr·ª´ khi kh√°ch h·ªèi c·ª• th·ªÉ\n\n");
        
        return prompt.toString();
    }
}
